
testLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000003ee  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800064  00800064  000004a6  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000888  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001af  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001f2  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000060d  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000020d  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000037c  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000080  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000031e  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000088  00000000  00000000  0000202a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000043  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	67 c0       	rjmp	.+206    	; 0xd6 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	ae c0       	rjmp	.+348    	; 0x170 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee ee       	ldi	r30, 0xEE	; 238
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ae 37       	cpi	r26, 0x7E	; 126
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3a d1       	rcall	.+628    	; 0x2b8 <main>
  44:	d2 c1       	rjmp	.+932    	; 0x3ea <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <filtr_1>:


// фильтр первого порядка с коэффициентом усиления = 256 (иначе на малых сигналах возможна самоблокировка фильтра по ограниченной разрядности)
#if 1
uint8_t filtr_1 (uint8_t in)
{
  48:	ef 92       	push	r14
  4a:	ff 92       	push	r15
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
  50:	68 2f       	mov	r22, r24
	static uint16_t lastOut=0;
	uint16_t out = in * (256 - WLag) + ((WLag * (uint32_t)lastOut) / 256);
  52:	20 91 7d 00 	lds	r18, 0x007D
  56:	40 e0       	ldi	r20, 0x00	; 0
  58:	51 e0       	ldi	r21, 0x01	; 1
  5a:	ca 01       	movw	r24, r20
  5c:	82 1b       	sub	r24, r18
  5e:	91 09       	sbc	r25, r1
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	7e d1       	rcall	.+764    	; 0x360 <__mulhi3>
  64:	ec 01       	movw	r28, r24
  66:	60 91 66 00 	lds	r22, 0x0066
  6a:	70 91 67 00 	lds	r23, 0x0067
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	50 e0       	ldi	r21, 0x00	; 0
  78:	85 d1       	rcall	.+778    	; 0x384 <__mulsi3>
  7a:	67 2f       	mov	r22, r23
  7c:	78 2f       	mov	r23, r24
  7e:	89 2f       	mov	r24, r25
  80:	99 27       	eor	r25, r25
  82:	c6 0f       	add	r28, r22
  84:	d7 1f       	adc	r29, r23
	lastOut = out;
  86:	d0 93 67 00 	sts	0x0067, r29
  8a:	c0 93 66 00 	sts	0x0066, r28
	return out / 256; 

}
  8e:	7e 01       	movw	r14, r28
  90:	8f 2d       	mov	r24, r15
  92:	df 91       	pop	r29
  94:	cf 91       	pop	r28
  96:	ff 90       	pop	r15
  98:	ef 90       	pop	r14
  9a:	08 95       	ret

0000009c <startT1_div8_fastPWM_B>:
}
#endif

void startT1_div8_fastPWM_B(void)
{
	TCCR0B |= _BV(CS01);	// div_8 
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	83 bf       	out	0x33, r24	; 51
	TCCR0A = _BV(WGM00)|_BV(WGM01);	// fast PWM 0 to FF
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	8f bd       	out	0x2f, r24	; 47
	TCCR0A |= _BV(COM0B1) | _BV(COM0B0);		// inverted PWM to pin to light control
  a6:	8f b5       	in	r24, 0x2f	; 47
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	8f bd       	out	0x2f, r24	; 47
}
  ac:	08 95       	ret

000000ae <setLightBright>:
{
	TCCR0A &= ~(_BV(COM0B1) | _BV(COM0B0));
}

void setLightBright(uint8_t val)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	0f 92       	push	r0
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	if(val == 0)
  b8:	88 23       	and	r24, r24
  ba:	21 f4       	brne	.+8      	; 0xc4 <setLightBright+0x16>
	TCCR0A |= _BV(COM0B1) | _BV(COM0B0);		// inverted PWM to pin to light control
}

inline void stop_fastPWM_B(void)
{
	TCCR0A &= ~(_BV(COM0B1) | _BV(COM0B0));
  bc:	9f b5       	in	r25, 0x2f	; 47
  be:	9f 7c       	andi	r25, 0xCF	; 207
  c0:	9f bd       	out	0x2f, r25	; 47
  c2:	03 c0       	rjmp	.+6      	; 0xca <setLightBright+0x1c>
	{
		stop_fastPWM_B();
	}
	else 
	{
		startT1_div8_fastPWM_B();
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	ea df       	rcall	.-44     	; 0x9c <startT1_div8_fastPWM_B>
  c8:	89 81       	ldd	r24, Y+1	; 0x01
	}
	OCR0B = ~val;
  ca:	80 95       	com	r24
  cc:	89 bd       	out	0x29, r24	; 41
}
  ce:	0f 90       	pop	r0
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <__vector_3>:

	return ret;
}

ISR(TIM0_OVF_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31



//	PORTB |= _BV(0);

	ms10_timer--;
  f8:	80 91 63 00 	lds	r24, 0x0063
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	80 93 63 00 	sts	0x0063, r24
	if(ms10_timer == 0)
 102:	88 23       	and	r24, r24
 104:	41 f4       	brne	.+16     	; 0x116 <__vector_3+0x40>
	{
		ms10_timer = MS_10;
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 63 00 	sts	0x0063, r24
		evt.ms10 = 1;
 10c:	80 91 6b 00 	lds	r24, 0x006B
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 93 6b 00 	sts	0x006B, r24
	}

    ADMUX&=~(0x3);
 116:	87 b1       	in	r24, 0x07	; 7
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	87 b9       	out	0x07, r24	; 7
    ADMUX|=ADC3;
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC); // start ADC conversion (Light from PWM is OFF!)
 122:	36 9a       	sbi	0x06, 6	; 6
	
	if(adc_photosensor > 255)
 124:	80 91 78 00 	lds	r24, 0x0078
 128:	90 91 79 00 	lds	r25, 0x0079
 12c:	8f 3f       	cpi	r24, 0xFF	; 255
 12e:	91 05       	cpc	r25, r1
 130:	11 f0       	breq	.+4      	; 0x136 <__vector_3+0x60>
 132:	08 f0       	brcs	.+2      	; 0x136 <__vector_3+0x60>
	{
		photoLevel = 255;
 134:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		photoLevel = adc_photosensor;
 136:	80 93 6e 00 	sts	0x006E, r24
	}
	photoLevelLPF = filtr_1(photoLevel);
 13a:	80 91 6e 00 	lds	r24, 0x006E
 13e:	84 df       	rcall	.-248    	; 0x48 <filtr_1>
 140:	80 93 68 00 	sts	0x0068, r24


	
	evt.tic = 1;
 144:	80 91 6b 00 	lds	r24, 0x006B
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 93 6b 00 	sts	0x006B, r24
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_9>:

uint8_t mirophone_cycle=0;
#define MICROPHONE_CYCLE_NUM	2

ISR(ADC_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	switch(ADMUX&0x3)
 17e:	87 b1       	in	r24, 0x07	; 7
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	83 70       	andi	r24, 0x03	; 3
 184:	90 70       	andi	r25, 0x00	; 0
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	89 f0       	breq	.+34     	; 0x1ae <__vector_9+0x3e>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	91 05       	cpc	r25, r1
 190:	01 f5       	brne	.+64     	; 0x1d2 <__vector_9+0x62>
	{
		case ADC3:
		{
			//PORTB &= ~_BV(0);
			adc_photosensor=ADC;
 192:	84 b1       	in	r24, 0x04	; 4
 194:	95 b1       	in	r25, 0x05	; 5
 196:	90 93 79 00 	sts	0x0079, r25
 19a:	80 93 78 00 	sts	0x0078, r24

			mirophone_cycle=0;
 19e:	10 92 65 00 	sts	0x0065, r1
			ADMUX&=~(0x3);
 1a2:	87 b1       	in	r24, 0x07	; 7
 1a4:	8c 7f       	andi	r24, 0xFC	; 252
 1a6:	87 b9       	out	0x07, r24	; 7
			ADMUX|=ADC1;
 1a8:	38 9a       	sbi	0x07, 0	; 7
			ADCSRA |= _BV(ADSC);
 1aa:	36 9a       	sbi	0x06, 6	; 6
		}
		break;
 1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <__vector_9+0x62>

		case ADC1:
		{
			
			adc_microphone=ADC;
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	90 93 7b 00 	sts	0x007B, r25
 1b6:	80 93 7a 00 	sts	0x007A, r24

			if(mirophone_cycle<MICROPHONE_CYCLE_NUM)
 1ba:	90 91 65 00 	lds	r25, 0x0065
 1be:	92 30       	cpi	r25, 0x02	; 2
 1c0:	40 f4       	brcc	.+16     	; 0x1d2 <__vector_9+0x62>
			{
				ADMUX&=~(0x3);
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	8c 7f       	andi	r24, 0xFC	; 252
 1c6:	87 b9       	out	0x07, r24	; 7
				ADMUX|=ADC1;
 1c8:	38 9a       	sbi	0x07, 0	; 7
				ADCSRA |= _BV(ADSC);
 1ca:	36 9a       	sbi	0x06, 6	; 6
				mirophone_cycle++;
 1cc:	9f 5f       	subi	r25, 0xFF	; 255
 1ce:	90 93 65 00 	sts	0x0065, r25

		default:
		{
		}
	}
}
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <stateMashine>:

void stateMashine(void)
{
	static uint16_t timer = 200;	// POWER_ON mode timer
	
	if(photoLevelLPF > (triggerPhotoLevel + HYST))
 1e0:	20 91 68 00 	lds	r18, 0x0068
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 91 7c 00 	lds	r20, 0x007C
 1ea:	80 91 76 00 	lds	r24, 0x0076
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	84 0f       	add	r24, r20
 1f2:	91 1d       	adc	r25, r1
 1f4:	82 17       	cp	r24, r18
 1f6:	93 07       	cpc	r25, r19
 1f8:	24 f4       	brge	.+8      	; 0x202 <stateMashine+0x22>
	{	// при освешенности большей порога однозначно выключаем свет из любого режима
		setLightBright(BRIGHT_0);    // turn the LED off
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	58 df       	rcall	.-336    	; 0xae <setLightBright>
		mode = MODE_OFF;
 1fe:	10 92 60 00 	sts	0x0060, r1
	}
	switch (mode)
 202:	80 91 60 00 	lds	r24, 0x0060
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	11 f1       	breq	.+68     	; 0x24e <stateMashine+0x6e>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	30 f0       	brcs	.+12     	; 0x21a <stateMashine+0x3a>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	49 f1       	breq	.+82     	; 0x264 <stateMashine+0x84>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	09 f0       	breq	.+2      	; 0x218 <stateMashine+0x38>
 216:	4f c0       	rjmp	.+158    	; 0x2b6 <stateMashine+0xd6>
 218:	37 c0       	rjmp	.+110    	; 0x288 <stateMashine+0xa8>
	{
		case MODE_OFF:	// свет выключен т.к. внешняя освещенность больше порога. При снижении освещенности переходим в нормальный режим 
			if(photoLevelLPF  <= (triggerPhotoLevel - HYST))
 21a:	20 91 68 00 	lds	r18, 0x0068
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	80 91 76 00 	lds	r24, 0x0076
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	40 91 7c 00 	lds	r20, 0x007C
 22a:	84 1b       	sub	r24, r20
 22c:	91 09       	sbc	r25, r1
 22e:	82 17       	cp	r24, r18
 230:	93 07       	cpc	r25, r19
 232:	0c f4       	brge	.+2      	; 0x236 <stateMashine+0x56>
 234:	40 c0       	rjmp	.+128    	; 0x2b6 <stateMashine+0xd6>
			{
		    	setLightBright(BRIGHT_LOW);    // turn the LED off by making the voltage LOW
 236:	80 91 75 00 	lds	r24, 0x0075
 23a:	39 df       	rcall	.-398    	; 0xae <setLightBright>
				mode = MODE_NORMAL;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 60 00 	sts	0x0060, r24
				evt.sound = 0;
 242:	80 91 6b 00 	lds	r24, 0x006B
 246:	87 7f       	andi	r24, 0xF7	; 247
 248:	80 93 6b 00 	sts	0x006B, r24
 24c:	08 95       	ret
		  	}
		break;

		case POWER_ON:
	    	if(timer)
 24e:	80 91 61 00 	lds	r24, 0x0061
 252:	90 91 62 00 	lds	r25, 0x0062
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	e9 f4       	brne	.+58     	; 0x294 <stateMashine+0xb4>
			{
				timer--;
			}
			else
			{
		    	setLightBright(BRIGHT_0);    // turn the LED off by making the voltage LOW
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	28 df       	rcall	.-432    	; 0xae <setLightBright>
				mode = MODE_OFF;
 25e:	10 92 60 00 	sts	0x0060, r1
 262:	08 95       	ret
		break;

		case MODE_NORMAL: // освещенность в этом режиме - 20%. при срабатывании датчика звука - ставим яркость 100 и уходим в отработку таймера 
			//setLightBright(photoLevelLPF);
//			setLightBright(BRIGHT_100);
			if(evt.sound)
 264:	80 91 6b 00 	lds	r24, 0x006B
 268:	83 ff       	sbrs	r24, 3
 26a:	25 c0       	rjmp	.+74     	; 0x2b6 <stateMashine+0xd6>
			{
	    		timer = timer_ON_MODE;
 26c:	80 91 6c 00 	lds	r24, 0x006C
 270:	90 91 6d 00 	lds	r25, 0x006D
 274:	90 93 62 00 	sts	0x0062, r25
 278:	80 93 61 00 	sts	0x0061, r24
	    		setLightBright(BRIGHT_100);    // turn the LED off by making the voltage LOW
 27c:	81 ee       	ldi	r24, 0xE1	; 225
 27e:	17 df       	rcall	.-466    	; 0xae <setLightBright>
				mode = MODE_TIMER;
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 60 00 	sts	0x0060, r24
 286:	08 95       	ret
			
			}
		break;

		case MODE_TIMER:
	    	if(timer)
 288:	80 91 61 00 	lds	r24, 0x0061
 28c:	90 91 62 00 	lds	r25, 0x0062
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	31 f0       	breq	.+12     	; 0x2a0 <stateMashine+0xc0>
			{
				timer--;
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	90 93 62 00 	sts	0x0062, r25
 29a:	80 93 61 00 	sts	0x0061, r24
 29e:	08 95       	ret
			}
			else
			{
		    	setLightBright(BRIGHT_LOW);    // turn the LED to 20%
 2a0:	80 91 75 00 	lds	r24, 0x0075
 2a4:	04 df       	rcall	.-504    	; 0xae <setLightBright>
				mode = MODE_NORMAL;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 60 00 	sts	0x0060, r24
				evt.sound = 0;
 2ac:	80 91 6b 00 	lds	r24, 0x006B
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	80 93 6b 00 	sts	0x006B, r24
 2b6:	08 95       	ret

000002b8 <main>:
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS1) | _BV(ADPS0);	// около 40 мкс на преобразование (8 бит) при 1 200 000
	DIDR0|=_BV(ADC1D)|_BV(ADC3D);
}

int main()
{
 2b8:	1f 93       	push	r17
	}
}

inline void init_var(void)
{
	triggerPhotoLevel = eeprom_read_byte(&triggerPhotoLevel_EEMEM); // 
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	7b d0       	rcall	.+246    	; 0x3b6 <__eerd_byte_tn13a>
 2c0:	18 2f       	mov	r17, r24
 2c2:	80 93 76 00 	sts	0x0076, r24
	triggerSoundLevel = eeprom_read_byte(&triggerSoundLevel_EEMEM); // 
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	75 d0       	rcall	.+234    	; 0x3b6 <__eerd_byte_tn13a>
 2cc:	80 93 77 00 	sts	0x0077, r24
	WLag = eeprom_read_byte(&WLag_EEMEM); // постоянная времени фильтра
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	70 d0       	rcall	.+224    	; 0x3b6 <__eerd_byte_tn13a>
 2d6:	80 93 7d 00 	sts	0x007D, r24
	BRIGHT_LOW = eeprom_read_byte(&BRIGHT_LOW_EEMEM); // уровень пониженной яркости (из максимума = 250)
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	6b d0       	rcall	.+214    	; 0x3b6 <__eerd_byte_tn13a>
 2e0:	80 93 75 00 	sts	0x0075, r24
	timer_ON_MODE = eeprom_read_word(&timer_ON_MODE_EEMEM); // время удержания при срабатывании звука
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	6e d0       	rcall	.+220    	; 0x3c6 <__eerd_word_tn13a>
 2ea:	90 93 6d 00 	sts	0x006D, r25
 2ee:	80 93 6c 00 	sts	0x006C, r24
	HYST = triggerPhotoLevel/16;	// гистерезис день/ночь
 2f2:	12 95       	swap	r17
 2f4:	1f 70       	andi	r17, 0x0F	; 15
 2f6:	10 93 7c 00 	sts	0x007C, r17
	mode = POWER_ON;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 60 00 	sts	0x0060, r24
}

int main()
{
	init_var();
	DDRB |=0b00000011;//Led=portB.1
 300:	87 b3       	in	r24, 0x17	; 23
 302:	83 60       	ori	r24, 0x03	; 3
 304:	87 bb       	out	0x17, r24	; 23
	startT1_div8_fastPWM_B();		// PWM to pin to light control
}

inline void ADC_init(void)
{
	ADMUX&=~(0x3);
 306:	87 b1       	in	r24, 0x07	; 7
 308:	8c 7f       	andi	r24, 0xFC	; 252
 30a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS1) | _BV(ADPS0);	// около 40 мкс на преобразование (8 бит) при 1 200 000
 30c:	86 b1       	in	r24, 0x06	; 6
 30e:	8b 68       	ori	r24, 0x8B	; 139
 310:	86 b9       	out	0x06, r24	; 6
	DIDR0|=_BV(ADC1D)|_BV(ADC3D);
 312:	84 b3       	in	r24, 0x14	; 20
 314:	8c 60       	ori	r24, 0x0C	; 12
 316:	84 bb       	out	0x14, r24	; 20
}

inline void timer_init(void)
{
	//Setup timer interrupt and PWM pins
	TIMSK0 |= 2;						// and OVF interrupt
 318:	89 b7       	in	r24, 0x39	; 57
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	89 bf       	out	0x39, r24	; 57
	TCNT0=0; 
 31e:	12 be       	out	0x32, r1	; 50
	setLightBright(BRIGHT_100);	// on
 320:	81 ee       	ldi	r24, 0xE1	; 225
 322:	c5 de       	rcall	.-630    	; 0xae <setLightBright>
	startT1_div8_fastPWM_B();		// PWM to pin to light control
 324:	bb de       	rcall	.-650    	; 0x9c <startT1_div8_fastPWM_B>
{
	init_var();
	DDRB |=0b00000011;//Led=portB.1
	ADC_init();
	timer_init();
	sei();
 326:	78 94       	sei
	while(1)
	{
		if(evt.ms10)
 328:	80 91 6b 00 	lds	r24, 0x006B
 32c:	81 ff       	sbrs	r24, 1
 32e:	06 c0       	rjmp	.+12     	; 0x33c <main+0x84>
		{
			stateMashine();
 330:	57 df       	rcall	.-338    	; 0x1e0 <stateMashine>
			evt.ms10 = 0;
 332:	80 91 6b 00 	lds	r24, 0x006B
 336:	8d 7f       	andi	r24, 0xFD	; 253
 338:	80 93 6b 00 	sts	0x006B, r24


inline uint8_t findSoundFront(void)
{
	uint8_t  ret=0;
	uint8_t  sound_val=(uint8_t)(adc_microphone>>2);
 33c:	80 91 7a 00 	lds	r24, 0x007A
 340:	90 91 7b 00 	lds	r25, 0x007B
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24

	if(sound_val>triggerSoundLevel)
 34c:	20 91 77 00 	lds	r18, 0x0077
 350:	28 17       	cp	r18, r24
 352:	50 f7       	brcc	.-44     	; 0x328 <main+0x70>
		{
			stateMashine();
			evt.ms10 = 0;
		}

		if(findSoundFront()) evt.sound = 1;
 354:	80 91 6b 00 	lds	r24, 0x006B
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	80 93 6b 00 	sts	0x006B, r24
 35e:	e4 cf       	rjmp	.-56     	; 0x328 <main+0x70>

00000360 <__mulhi3>:
 360:	55 27       	eor	r21, r21
 362:	00 24       	eor	r0, r0

00000364 <__mulhi3_loop>:
 364:	80 ff       	sbrs	r24, 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <__mulhi3_skip1>
 368:	06 0e       	add	r0, r22
 36a:	57 1f       	adc	r21, r23

0000036c <__mulhi3_skip1>:
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	21 f0       	breq	.+8      	; 0x37e <__mulhi3_exit>
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	99 f7       	brne	.-26     	; 0x364 <__mulhi3_loop>

0000037e <__mulhi3_exit>:
 37e:	95 2f       	mov	r25, r21
 380:	80 2d       	mov	r24, r0
 382:	08 95       	ret

00000384 <__mulsi3>:
 384:	ff 27       	eor	r31, r31
 386:	ee 27       	eor	r30, r30
 388:	bb 27       	eor	r27, r27
 38a:	aa 27       	eor	r26, r26

0000038c <__mulsi3_loop>:
 38c:	60 ff       	sbrs	r22, 0
 38e:	04 c0       	rjmp	.+8      	; 0x398 <__mulsi3_skip1>
 390:	a2 0f       	add	r26, r18
 392:	b3 1f       	adc	r27, r19
 394:	e4 1f       	adc	r30, r20
 396:	f5 1f       	adc	r31, r21

00000398 <__mulsi3_skip1>:
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	44 1f       	adc	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	89 f7       	brne	.-30     	; 0x38c <__mulsi3_loop>
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	76 07       	cpc	r23, r22
 3ae:	71 f7       	brne	.-36     	; 0x38c <__mulsi3_loop>

000003b0 <__mulsi3_exit>:
 3b0:	cf 01       	movw	r24, r30
 3b2:	bd 01       	movw	r22, r26
 3b4:	08 95       	ret

000003b6 <__eerd_byte_tn13a>:
 3b6:	e1 99       	sbic	0x1c, 1	; 28
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <__eerd_byte_tn13a>
 3ba:	1f ba       	out	0x1f, r1	; 31
 3bc:	8e bb       	out	0x1e, r24	; 30
 3be:	e0 9a       	sbi	0x1c, 0	; 28
 3c0:	99 27       	eor	r25, r25
 3c2:	8d b3       	in	r24, 0x1d	; 29
 3c4:	08 95       	ret

000003c6 <__eerd_word_tn13a>:
 3c6:	a8 e1       	ldi	r26, 0x18	; 24
 3c8:	42 e0       	ldi	r20, 0x02	; 2
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__eerd_blraw_tn13a>

000003cc <__eerd_block_tn13a>:
 3cc:	a8 2f       	mov	r26, r24
 3ce:	86 2f       	mov	r24, r22

000003d0 <__eerd_blraw_tn13a>:
 3d0:	e8 2f       	mov	r30, r24
 3d2:	e1 99       	sbic	0x1c, 1	; 28
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <__eerd_blraw_tn13a+0x2>
 3d6:	1f ba       	out	0x1f, r1	; 31
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <__eerd_blraw_tn13a+0x14>
 3da:	ee bb       	out	0x1e, r30	; 30
 3dc:	e0 9a       	sbi	0x1c, 0	; 28
 3de:	e3 95       	inc	r30
 3e0:	0d b2       	in	r0, 0x1d	; 29
 3e2:	0d 92       	st	X+, r0
 3e4:	41 50       	subi	r20, 0x01	; 1
 3e6:	c8 f7       	brcc	.-14     	; 0x3da <__eerd_blraw_tn13a+0xa>
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
